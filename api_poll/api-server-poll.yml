- project:
    name: api-server-poll-job
    jobs:
        - {{ api_server_poll_job_name }}:
            api_server_poll_job_name: {{ api_server_poll_job_name }}
            image_under_test: {{ image_under_test }}
            analytics_server: {{ analytics_server }}
            git_url: {{ git_url }}
            git_sha: {{ git_sha }}
            logs_dir: {{ logs_dir }}
            scan_gitpath: {{ scan_gitpath }}

- job-template:
    name: {{ api_server_poll_job_name }}
    description: |
        Managed by Jenkins Job Builder, do not edit manually!
    triggers:
      - timed: "H/30 * * * *"
    builders:
        - shell: |
            export PYTHONPATH=$PYTHONPATH:/opt/scanning
            COUNTER=0
            if [ -f counter.txt ]; then
              COUNTER=$(cat counter.txt)
            else
              COUNTER=0
            fi

            echo "This is $COUNTER number run .."

            if [ $COUNTER -lt 48 ]; then
                if [ ! -f do_not_poll ]; then

                  sudo docker tag registry.access.redhat.com/rhel7:latest {image_under_test}

                  echo "Running the analytics-scanner report scan_type and finding the status_code returned from API server.."

                  sudo SERVER={analytics_server} IMAGE_NAME={image_under_test} GITURL={git_url} GITSHA={git_sha} atomic scan --verbose --scanner=analytics-integration --scan_type=report {image_under_test} > scanner_response.txt

                  cat scanner_response.txt

                  STATUS_CODE=$(cat scanner_response.txt |grep api_status_code | cut -f2 -d ":" | cut -c2-4)

                  OUTPUT_FILE=$(cat scanner_response.txt | grep "Files associated with this scan are in" | cut -d ' ' -f 8 | sed 's/\.//')

                  echo "Removing the unneeded scanner results file $OUTPUT_FILE"

                  sudo rm -rf $OUTPUT_FILE scanner_response.txt

                  if [ "$STATUS_CODE" == "200" ]; then
                      echo "Success"
                      # gemini_report=True marks here that api server has reported something
                      # in this case it has reported that, it has generated the report
                      gemini_report=True
                      touch do_not_poll
                      python /opt/scanning/api_poll/send_scan_data_to_tube.py  {analytics_server} {image_under_test} {git_url} {git_sha} {logs_dir} {scan_gitpath} $gemini_report
                  elif [ "$STATUS_CODE" == "400" ]; then
                      echo "dependency/version-lock file is absent in referenced Git repo. Report can't be generated at server."
                      # gemini_report=False marks here that api server has nothing to report
                      # as the referenced git repo doesn't have version-lock/dependency file.
                      gemini_report=False
                      touch do_not_poll
                      python /opt/scanning/api_poll/send_scan_data_to_tube.py  {analytics_server} {image_under_test} {git_url} {git_sha} {logs_dir} {scan_gitpath} $gemini_report
                  else
                      echo "Status code from Gemini API is $STATUS_CODE"
                  fi
                  sudo docker rmi {image_under_test}
                else
                    echo "Success report scan has been requested for this"
                    rm -f do_not_poll counter.txt
                    jenkins-jobs --ignore-cache --conf /etc/jenkins_jobs/jenkins_jobs.ini delete  {api_server_poll_job_name}
                fi
            else
                gemini_report=False
                echo "Gemini server polling timed out"
                python /opt/scanning/api_poll/send_scan_data_to_tube.py  {analytics_server} {image_under_test} {git_url} {git_sha} {logs_dir} {scan_gitpath} $gemini_report
                rm -f do_not_poll counter.txt
                jenkins-jobs --ignore-cache --conf /etc/jenkins_jobs/jenkins_jobs.ini delete  {api_server_poll_job_name}
            fi
            COUNTER=$((COUNTER+1))
            rm -rf counter.txt
            echo $COUNTER > counter.txt
