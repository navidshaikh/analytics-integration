#!/usr/bin/python
"""This class is a wrapper for running analytics scanner and grab results."""

from scanning.scanners.base import Scanner


class AnalyticsIntegration(Scanner):
    """
    Scanner to invoke scanning job at Analytics server.
    """

    def __init__(self):
        """
        Initialize the invoker class.
        """
        self.scanner = "analytics-integration"
        self.result_file = "analytics_scanner_results.json"

    def run(self, image, server, giturl, gitsha, scan_type="register"):
        """Run the scanner."""
        # initializing a blank list that will contain results from all the
        # scan types of this scanner
        super(AnalyticsIntegration, self).__init__(
            image=image,
            scanner=self.scanner,
            result_file=self.result_file,
        )

        # this scanner needs following two env vars for atomic scan command
        env_vars = {
            "IMAGE_NAME": image,
            "SERVER": server,
            "GITURL": giturl,
            "GITSHA": gitsha}

        data = self.scan(
            process_output=False, env_vars=env_vars, scan_type=scan_type)

        # invoke base class's cleanup utility
        self.cleanup()

        return self.process_output(data, scan_type)

    def process_output(self, json_data, scan_type):
        """
        Genaralising output.

        This method processes the output generated by scanner and
        adds/update fields as needed. The scanner has two type
        register and report. Meaning scanner can do two jobs.
        For each job, a report is generated and this method
        adds relevant messages to scanner's output.
        For report scan type, this method finds out
        if report has any dependencies and if any dependency
        has reported CVEs. If there are CVEs, data["alert"] is
        set.
        """
        data = {}
        data["scanner"] = self.scanner
        data["image_under_test"] = self.image

        # there are logs inside logs
        logs = json_data.get("logs", {})
        data["logs"] = logs
        # default
        data["alert"] = False

        if scan_type == "register":
            data["msg"] = ("Registered container for scanning at server."
                           " Report has registration related info, no data.")
        else:
            # get the git-url and get-sha to report the values in summary msg
            git_url = logs.get("api_data", {}).get("git-url", "")
            git_sha = logs.get("api_data", {}).get("git-sha", "")

            # get the status code
            api_status_code = int(logs.get("api_status_code", 0))

            # 400 means dependency/version-lock file is absent in
            # referenced git repository, and server can't generate a report
            if api_status_code == 400:

                data["msg"] = (
                    "dependency/version-lock file is absent in {} for git-sha="
                    "{}. Anlaytics report can't be generated.".format(
                        git_url, git_sha))

                return data

            # rest of the following cases are for 200 and 404 status codes
            # where either report is generated or server has timed out
            # (24 hours) to generate the report

            deps = logs.get("Scan Results", {}).get("dependencies", [])
            # if dependencies are not found
            if not deps:
                data["msg"] = ("No report found for {} git-sha={} at server."
                               "Timed out after waiting for 24 hours!".format(
                                   git_url, git_sha))
            else:
                msg = ""
                # iterate through all dependencies found
                for each in deps:
                    # if cve count, log the issue in msg
                    if each.get("cve_count", 0) > 0:
                        data["alert"] = True
                        for k, v in each.iteritems():
                            # convert array/list to string
                            if type(v) == list:
                                v = ", ".join(iter(v))
                            msg = msg + "{}: {}+ \n".format(str(k), str(v))
                        msg = msg + "\n"

                # fix extra char "+" added to every response from server
                msg = msg.replace("+", "")

                # if no cves found
                if not data["alert"]:
                    data["msg"] = "No CVEs found in image under test."
                # else, if cves found
                else:
                    # store the processed msg
                    data["msg"] = msg

        return data
